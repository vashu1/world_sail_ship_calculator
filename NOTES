SEABORN example https://github.com/dkobak/excess-mortality/blob/main/europe-nuts.ipynb


SSL vulnerability https://habr.com/ru/post/677562/

"""
uv - xy?

Include (u,v) means and scalar mean speed w for comparison

file.dimensions
    zlev1 10.
    time4 [245328 245334 245340 245346]
    lat719  -89.75  89.75
    lon1440 0 359.75

print(file.variables['v'])   current shape = (4, 1, 719, 1440)
"""

=== waves

-- FOWD https://journals.ametsoc.org/view/journals/atot/38/7/JTECH-D-20-0185.1.xml
    https://www.seanoe.org/data/00601/71337/


!! SEANOE https://www.seanoe.org/data/00601/71337/

../seanoe/ASAR_Product_NC_2003/ENVISAT_ASAR_Wave_20030101_000404_20030101_000649_00012_00316.nc
'latitude', 'longitude', 'time', 'heading', 'inci_angle', 'land_flag', 'homogeneity', 'normalized_variance', 'rejection_flag', 'qc_flag', 'swh', 'mwp', 'swh_cali', 'mwp_cali'
lat  (12,)
lon (12,)
time [94694644 94694659] [94694794 94694809]

18052 files
70 files per day
10K per file

latitude [54.875015 55.748432] [63.574326  0.      ]
longitude [-38.59197 -38.96503] [-42.962505   0.      ]
time [94694644 94694659] [94694794 94694809]

../seanoe/ASAR_Product_NC_2003/ENVISAT_ASAR_Wave_20030730_212537_20030730_214551_00018_00329.nc
latitude [-38.56931  -37.694366] [32.27441 33.15805]
longitude [19.008629 18.699593] [1.363645 1.141778]
time [112915537 112915552] [112916736 112916751]

ENVISAT satellite
a Sun synchronous polar orbit at an altitude of 790 ± 10 km. It orbits the Earth in about 101 minutes, with a repeat cycle of 35 days.
...
RA-2 (Radar Altimeter 2) is a dual-frequency Nadir pointing Radar operating in the Ku band and S bands, it is used to define ocean topography, map/monitor sea ice and measure land heights.
...
https://www.nature.com/articles/s41597-020-00601-3

The wave mode (WM), which is dedicated to measurements of ocean wave, is a unique imaging mode of SAR. Although the WM covers a relatively small area of the sea surface (approximately 6 km by 10 km), these data are automatically acquired by spaceborne SAR over the global oceans. From the European Remote Sensing Satellite missions (ERS-1, 1991–2000 and ERS-2, 1995–2011)12,13,14,15 to the Environment Satellite (ENVISAT) mission (2002–2012)16,17 and the current Sentinel-1A/1B (2014 -)18 and the Chinese Gaofen-3 (2016 -) missions19, WM data have been available for nearly 30 years and will continue to be acquired into the future, constituting a valuable dataset for global sea state measurements.

ASAR WM data have a spatial coverage ranging from 6 km × 5 km to 10 km × 5 km over the sea surface. The distance between two consecutive acquisitions of WM data is 100 km,



===

Blended_Sea_Winds_dataset_6hourly 1987 2018
OSCAR 1995 2005

SEANOE 2003 2011
===

cartopy

https://www.ncdc.noaa.gov/data-access/marineocean-data/blended-global
The Blended Sea Winds dataset contains globally gridded, high-resolution ocean surface vector winds and wind stresses
on a global 0.25° grid, and multiple time resolutions of six-hourly, daily, monthly, and 11-year (1995–2005) climatological monthlies


mkdir Blended_Sea_Winds_dataset_6hourly
cd Blended_Sea_Winds_dataset_6hourly
wget -r https://www.ncei.noaa.gov/data/blended-global-sea-surface-wind-products/access/winds/6-hourly/


../data_snippets/wind/Blended_Sea_Winds_dataset_6hourly//www.ncei.noaa.gov/data/blended-global-sea-surface-wind-products/access/winds/6-hourly/1987/uv19870709.nc


Especially for getting large datasets, we encourage you to use lftp instead of ftp because it allows repeated gets (m-get) to retrieve missed data files. See my_lftp.sh for an example.


windrose chart https://stock.adobe.com/au/images/windrose-meteorological-graphic-wind-rose-chart-set-compass-rose-map-example-rose-of-the-wind-for-scientific-materials-and-infographic-design/239041386
    australia http://www.bom.gov.au/cgi-bin/climate/cgi_bin_scripts/windrose_selector.cgi?period=Annual&type=9&location=38003

A small python3 script converting NOAA Blended Sea Winds data from .nc to .csv files.
https://github.com/oneandonlyoddo/nc2csv

git clone https://github.com/oneandonlyoddo/nc2csv.git
cd nc2csv/
pip3 install -r requirements.txt
python3 nc2csv.py --file ../Blended_Sea_Winds_dataset_6hourly/www.ncei.noaa.gov/data/blended-global-sea-surface-wind-products/access/winds/6-hourly/1987/uv19870711.nc



        1   18.408   18.408   19.342   19.342 nc2csv.py:14(convert)


from numpy.random.mtrand import uniform
import netCDF4
from timeit import Timer
import os, sys

def read_netcdf(filename):
    file = netCDF4.Dataset(filename)
    data = file.variables['data'][:]
    file.close()

filename = './www.ncei.noaa.gov/data/blended-global-sea-surface-wind-products/access/winds/6-hourly/1996/uv19960711.nc'
read_netcdf(filename)

time 4
zlev 1
lat 719
lon 1440

u m/s x-component
v m//s y-component
_FillValue: -9999.0
current shape = (4, 1, 719, 1440)


fromcdl  tocdl

>>> file.data_model
'NETCDF3_CLASSIC'
>>> file.dimensions
{'zlev': <class 'netCDF4._netCDF4.Dimension'>: name = 'zlev', size = 1, 'time': <class 'netCDF4._netCDF4.Dimension'>: name = 'time', size = 4, 'lat': <class 'netCDF4._netCDF4.Dimension'>: name = 'lat', size = 719, 'lon': <class 'netCDF4._netCDF4.Dimension'>: name = 'lon', size = 1440}

s = file.tocdl(coordvars=True, data=True)

pip3 install netCDF4
brew install cdo
brew install nco

brew tap homebrew/science
brew install netcdf


https://confluence.ecmwf.int/display/CKB/How+to+convert+NetCDF+to+CSV
Third option : Windows users

A third option to convert the data from NetCDF to CSV, for Windows users, is download and install netcdf4excel.  The plug-in opens directly NetCDF files in Microsoft Excel maintaining conventions for the NetCDF variables. Please see the link for more details: http://netcdf4excel.github.io/.
Other solutions

For Unix users, there are others options provided by some common NetCDF software packages. Please the links for more details:
    ncdump → http://manpages.ubuntu.com/manpages/xenial/man1/ncdump-hdf.1.html
    cdo → https://code.mpimet.mpg.de/projects/cdo/wiki/Tutorial
    ncks → https://www.unidata.ucar.edu/support/help/MailArchives/netcdf/msg08405.html


===== CURRENTS

OSCAR third degree resolution ocean surface currents
Granule Time Span: 1992-Oct-21 to 2020-Nov-16
https://podaac-opendap.jpl.nasa.gov/opendap/allData/oscar/preview/L4/oscar_third_deg/

https://podaac-opendap.jpl.nasa.gov/opendap/allData/oscar/preview/L4/oscar_third_deg/docs/oscarthirdguide.pdf


from https://podaac.jpl.nasa.gov/dataset/OSCAR_L4_OC_third-deg
mkdir oscar
cd oscar



====== DOWNLOAD

OSCAR currents
wget https://podaac-opendap.jpl.nasa.gov/opendap/allData/oscar/L4/oscar_1_deg/docs/bl2002.pdf
wget https://podaac-opendap.jpl.nasa.gov/opendap/allData/oscar/L4/oscar_1_deg/docs/readme.txt
wget -c -N --accept-regex='.*world_oscar_vel.*' -r https://podaac-opendap.jpl.nasa.gov/opendap/allData/oscar/L4/oscar_1_deg/contents.html
OR curl ./podaac-opendap.jpl.nasa.gov/opendap/allData/oscar/L4/oscar_1_deg/world_oscar_vel_5d1998.nc.gz.covjson ?

BAD    for i in {1995..2005} ; do echo $i ; curl https://podaac-opendap.jpl.nasa.gov/opendap/allData/oscar/L4/oscar_1_deg/world_oscar_vel_5d$i.nc.gz > world_oscar_vel_5d$i.nc ; done

DOWNLOAD blended 1995-2005
for i in {1995..2005} ; do echo $i ; wget -r https://www.ncei.noaa.gov/data/blended-global-sea-surface-wind-products/access/winds/6-hourly/$i/ ; done
-c -N

wget -c -N --accept-regex='.*1997.*' -r https://www.ncei.noaa.gov/data/blended-global-sea-surface-wind-products/access/winds/6-hourly/1997/

Ports="1 5 7 10 12"
for port in $Ports; do


NCDUMP http://manpages.ubuntu.com/manpages/xenial/man1/ncdump-hdf.1.html
Network Common Data Form (NetCDF) https://www.unidata.ucar.edu/software/netcdf/
    https://unidata.github.io/netcdf4-python/
unpacking nc https://confluence.ecmwf.int/display/CKB/How+to+convert+NetCDF+to+CSV
blended https://www.ncei.noaa.gov/data/blended-global-sea-surface-wind-products/access/winds/
    https://www.ncdc.noaa.gov/data-access/marineocean-data/blended-global/blended-sea-winds
Which is the best global wind dataset available for download https://www.researchgate.net/post/Which_is_the_best_global_wind_dataset_available_for_download


# from netCDF4 import MFDataset  # does not have a aggregation dimension

